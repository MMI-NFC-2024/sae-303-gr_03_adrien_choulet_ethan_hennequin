---
import sortedOrder from '../assets/json/sortedOrder.json';
import sortedData from '../assets/json/sortedData.json';
import colors from '../assets/json/colors.json';
---

<div class="w-full max-w-4xl mx-auto p-4">
  <div id="plot-container" class="bg-white rounded-lg shadow-sm"></div>
</div>

<script>
  import * as Plot from "@observablehq/plot";

  const container = document.getElementById('plot-container');
  const sortedData = JSON.parse(container?.getAttribute('data-sorted') || '[]');
  const sortedOrder = JSON.parse(container?.getAttribute('data-order') || '[]');
  const colors = JSON.parse(container?.getAttribute('data-colors') || '[]');

  const plot = Plot.plot({
    marginLeft: 150,
    marginRight: 80,
    width: 760,
    height: 420,
    style: {
      background: "white",
      fontFamily: "'Inter', 'Segoe UI', Arial, sans-serif",
      fontSize: "16px"
    },
    y: {
      label: "",
      domain: sortedOrder,
      tickSize: 0,
      tickPadding: 12,
      fontWeight: "600"
    },
    x: {
      label: "Proportion de lieux culturels",
      grid: true,
      tickFormat: ".0%",
      labelAnchor: "center"
    },
    marks: [
      Plot.rectY(sortedData, {
        y: "N_Departement",
        x1: 0, 
        x2: 1,
        fill: (d, i) => i % 2 ? "#f6f8fa" : "#fff",
        opacity: 0.7
      }),
      Plot.barX(sortedData, {
        x: "proportion",
        y: "N_Departement",
        fill: d => {
          let idx = sortedOrder.indexOf(d.N_Departement);
          return idx >= 0 ? colors[idx] : "#666";
        },
        rx: 5,
        height: 12
      }),
      Plot.text(sortedData, {
        x: d => d.proportion + 0.01,
        y: d => d.N_Departement,
        text: d => (d.proportion * 100).toFixed(1) + " %",
        fill: d => {
          let idx = sortedOrder.indexOf(d.N_Departement);
          return idx >= 0 ? colors[idx] : "#333";
        },
        fontWeight: "bold",
        fontSize: 17,
        textAnchor: "start",
        dy: 0
      })
    ]
  });

  if (container) {
    container.appendChild(plot);
  }
</script>

<script define:vars={{ sortedData, sortedOrder, colors }}>
  const container = document.getElementById('plot-container');
  if (container) {
    container.setAttribute('data-sorted', JSON.stringify(sortedData));
    container.setAttribute('data-order', JSON.stringify(sortedOrder));
    container.setAttribute('data-colors', JSON.stringify(colors));
  }
</script>

<style>
  #plot-container {
    min-height: 420px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
</style>